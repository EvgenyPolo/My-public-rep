# -*- coding: utf-8 -*-
"""sf_cycles_11_12_21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zcvo9FKPP5cE6F7JksLAEYLj1CAszhnt

# Циклы

Булыгин Олег  

* [LinkedIn](linkedin.com/in/obulygin)  
* [Telegram](https://t.me/obulygin91)  
* [facebook](fb.com/obulygin91)  
* [Vk](vk.com/obulygin91)  
* email: obulygin91@ya.ru  

[Сообщество по Python](https://yandex.ru/q/loves/pythontalk/) на Кью  
[Сообщество по Data Science и анализу данных](https://yandex.ru/q/loves/datatalk/) на Кью

## План
- цикл for  
- функции range и enumerate  
- цикл while
- операторы break и continue
- вложенные циклы

## Циклы
Циклы позволяют организовать повторение выполнения участков кода. В Python существует два типа циклов: цикл **for** и цикл **while**.

## Цикл **for**

Цикл for проходится по элементам любого итерируемого объекта (строки, списка и т.д.) и во время каждого прохода выполняет заданную последовательность действий.

Внутри цикла могут быть любые другие конструкции языка.
"""

# итерация по строкам
company_name = 'SkillFactory'
# мы сами задаем имя переменной в которую будут последовательно помещаться каждый элемент нашего объекта
for letter in company_name: 
    letter = letter.upper()
    print(f'*{letter}*', end='')

"""
У нас есть фургон, в котором мы перевозим грузы. Установлено ограничение на максимальный вес груза в 100кг. Необходимо произвести фильтрацию данных грузов"""

items = [1, 5, 76, 12, 123, 333, 5, 6, 7]
ok_items = []

for item in items:
    print('Груз весит ', item, ' килограмм')
    if item <= 100:
        ok_items.append(item) 
        print('Груз прошел проверку')
    else:
        print('Груз слишком большой')
print(ok_items)

"""Выведем информацию о компаниях, которые харанятся во вложенных списках в виде:  
`Company's capitalizations is ***`
"""

companies_capitalization = [
    ['Orange', 1.3],
    ['Maxisoft', 1.5],
    ['Headbook', 0.8],
    ['Nicola', 2.2]
]
for company in companies_capitalization:
    # print(company)
    print(f"{company[0]}'s capitalization is {company[1]}")

"""Мы можем распаковать элементы прямо в списке"""

companies_capitalization = [
    ['Orange', 1.3],
    ['Maxisoft', 1.5],
    ['Headbook', 0.8],
    ['Nicola', 2.2]
]
for company_name, cap in companies_capitalization:
    print(f"{company_name}'s capitalization is {cap}")

"""Посчитаем сумму элементов по главной диагонали квадратной матрицы"""

data = [
    [13, 25, 23, 34],
    [45, 32, 44, 47],
    [12, 33, 23, 95],
    [13, 53, 34, 35]
]

sum_ = 0
index = 0
for row in data:
    # print(row)
    sum_ += row[index]
    index += 1
print(sum_)

sum_ = 0
index = 0
for row in data:
    print(row[index])
    index += 1

sum_ = 0
index = 1
for row in data[:-1]:
    print(row[index])
    index += 1

sum_ = 0
index = 1
for row in data:
    try:
        print(row[index])
        index += 1
    except:
        break

"""**Практика** 

Внести правки в код выше, чтобы посчитать сумму элементов по обратной диагонали в матрице
"""

sum_ = 0 
index = -1
for row in data: 
    # print(row) 
    sum_ += row[index] 
    index -= 1 
print(sum_)

my_list_1 = [1, 2, 3, 4 ,5, 6]
my_list_2 = [4, 5, 6, 7]

for number in my_list_1:
    if number in my_list_2:
        print('Такое число есть')
    else:
        print('Такое число не найдено')

"""Пример вычисления метрики из набора списков. Столбцы в каждой строке:
- дата
- номер счетчика
- количество визитов

Найдем среднее количество визитов по нашим данным
"""

api_response = [
    ['2017-12-26', '777', 184],
    ['2017-12-27', '111', 146],
    ['2017-12-28', '777', 98],
    ['2017-12-29', '777', 206],
    ['2017-12-30', '111', 254],
    ['2017-12-31', '777', 89],
    ['2018-01-01', '111', 54],
    ['2018-01-02', '777', 68],
    ['2018-01-03', '777', 74],
    ['2018-01-04', '111', 89],
    ['2018-01-05', '777', 104],
    ['2018-01-06', '777', 99],
    ['2018-01-07', '777', 145],
    ['2018-01-08', '111', 184],
]

sum_ = 0
for element in api_response:
    sum_ += element[2]

print(round(sum_ / len(api_response), 2))

"""**Практика**  
У нас есть список, содержащий информацию о среднедневной температуре в Фаренгейтах за произвольный период по странам. Необходимо написать код, который рассчитает среднюю температуру за период для каждой страны.

Информацию нужно вывести в следующем виде:

```
Средняя температура в Thailand — ** F  
Средняя температура в Germany — ** F
...
```
"""

countries_temperature = [
    ['Thailand', [75.2, 77, 78.8, 73.4, 68, 75.2, 77]],
    ['Germany', [57.2, 55.4, 59, 59, 53.6]],
    ['Russia', [35.6, 37.4, 39.2, 41, 42.8, 39.2, 35.6]],
    ['Poland', [50, 50, 53.6, 57.2, 55.4, 55.4]]
]

for country in countries_temperature:
    avg_temp = sum(country[1]) / len(country[1])
    print(f'Средняя температура в {country[0]} — {avg_temp :.2f} F')

"""Итерация по словарям. 
Выведем информацию о странах и столициах в виде:  
 `The capital of ... is ...`
"""

europe = {'spain': {'capital':'madrid'},
           'france': {'capital':'paris'},
           'germany': {'capital':'berlin'},
           'norway': {'capital':'oslo'}}

for country, info in europe.items():
    print(f'The capital of {country.title()} is {info["capital"].title()}')

for country, info in europe.items():
    print(info)
    print(f'The capital of {country.title()} is {list(info.values())[0].title()}')

"""Посчитаем средний возраст в коллективе"""

people = {1: {'name': 'Oleg', 'age': '29', 'sex': 'Male'},
          2: {'name': 'Kate', 'age': '21', 'sex': 'Female'},
          3: {'name': 'Liza', 'age': '24', 'sex': 'Female'},
          4: {'name': 'Pavel', 'age': '36', 'sex': 'Male'}}

age = 0
for person in people.values():
    age += int(person['age'])
print(age / len(people))

"""**Практика**  

Согласно сайту www.bodycounters.com в четырех частях фильма “Пираты Карибского моря” было довольно много погибших. Нужно написать код, который будет счить их общее количество. Пиратов-зомби в последней части тоже считайте живыми.
"""

bodycount = {
    'Проклятие Черной жемчужины': {
        'человек': 17
    }, 

    'Сундук мертвеца': {
        'человек': 56,
        'раков-отшельников': 1
    },

    'На краю света': {
        'человек': 88
    },

    'На странных берегах': {
        'человек': 56,
        'русалок': 2,
        'ядовитых жаб': 3,
        'пиратов зомби': 2
    }
}

dead = 0 
for info in bodycount.values(): 
    # print(info)
    dead += sum(info.values()) 

print(dead)

dead = 0 
for info in bodycount.values(): 
    print(info)
    for name, count in info.items():
        if name != 'ядовитых жаб':
            dead += count
    # dead += sum(info.values()) 

print(dead)

"""Проблема изменения длины объекта во время итерации по нему

Дан список с визитами по городам и странам.  Напишем код, который возвращает отфильтрованный список geo_logs, содержащий только визиты из России.

"""

geo_logs = [
    {'visit1': ['Москва', 'Россия']},
    {'visit2': ['Дели', 'Индия']},
    {'visit3': ['Владимир', 'Россия']},
    {'visit4': ['Лиссабон', 'Португалия']},
    {'visit5': ['Париж', 'Франция']},
    {'visit6': ['Тула', 'Россия']},
    {'visit7': ['Курск', 'Россия']},
    {'visit8': ['Архангельск', 'Россия']}
]

for log in geo_logs:
    for el in log.values():
        if 'Россия' not in el:
            geo_logs.remove(log)

print(geo_logs)

result = []

for log in geo_logs:
    # print(list(log.values())[0])
    if 'Россия' in list(log.values())[0]:
        result.append(log)

print(result)

geo_logs_copy = geo_logs.copy()

for log in geo_logs_copy:
    # print(list(log.values())[0])
    if 'Россия' not in list(log.values())[0]:
        geo_logs.remove(log)

print(geo_logs)

geo_logs

for el in geo_logs:
    print(list(el.values())[0][0], end=' ')

'Россия' in [['Россия', 'Москва']]

'ff' in (['ff', 'ffa'])

"""## Функция range

range() позволяет генерировать ряд чисел в рамках заданного диапазона.
В зависимости от того, как много аргументов вы передаете в функцию, вы можете решить, где этот ряд чисел начнется и закончится, а также сможете определить шаг последовательности.

Есть три способа вызова range():

- range(стоп) берет один аргумент
- range(старт, стоп) берет два аргумента
- range(старт, стоп, шаг) берет три аргумента
"""

range(10)

for i in range(10):
    print(i)

# с указанием левой и правой границы
for i in range(3, 20):
    print(i)

# третий аргумент - шаг
for i in range(3, 20, 5):
    print(i)

"""Напишем программу, которая считает сумму квадратов n натуральных чисел.  
n запрашиваем у пользователя
"""

n = int(input('Введите число'))
sum_ = 0
for num in range(1, n + 1):
    sum_ += num ** 2
    print(f'Сумма на шаге {num}: {sum_}')
print(sum_)

"""**Практика**  
Напишите программу, которая рассчитаем факториал числа n. n запрашиваем у пользователя
"""

number = 5
total = 1 
for factorial in range(number, 1, -1): 
    total *= factorial 

print('Факториал числа равен: ', total)

n = int(input('Введите число ')) 
sum_ = 1 
for num in range(1, n + 1): 
    sum_ *= num 
    print(f'Сумма на шаге {num}: {sum_}') 
print(sum_)

"""## Функция enumerate

enumerate позволяет получать индекс каждого элемента в объекте
"""

list(enumerate('1,2,3,4,5'))

for i, el in enumerate('1,2,3,4,5'):  # в цикле можем сразу перебирать индексы и сами элементы
    print(i, el)

company_name = 'SkillFactory'
for i, letter in enumerate(company_name):  
    print(f'Позиция символа "{letter}" - {i + 1}')

"""**Практика**

Решим задачу с квадратной матрицей при помощи enumerate
"""

data = [
    [13, 25, 23, 34],
    [45, 32, 44, 47],
    [12, 33, 23, 95],
    [13, 53, 34, 35]
]

sum_ = 0

for i, el in enumerate(data):
    sum_ += el[i]

print(sum_)

sum([el[i] for i, el in enumerate(data)])

"""## Цикл while

Позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно. Как правило, цикл while используется, когда невозможно заранее определить точное значение количества проходов исполнения цикла.
"""

money = 5 # создаем переменную money и присваиваем ей значение 5
while money > 0: # запускаем цикл ("пока денег больше нуля")
    money -= 1 # уменьшаем на один переменную money
    print('Денег осталось: ', money) # пишем тело цикла: код, который будет исполняться, пока условие истино
    
print('Денег больше нет') # печатаем сообщение (уже вне цикла)

x = 7
while x != 0:
    if x % 2 == 0:
        print(x, '- четное число')
    else:
        print(x, '- нечетное число')
    x -= 1

"""А что будет, если мы сделаем так?"""

x = 7
while x != 0:
    if x % 2 == 0:
        print(x, '- четное число')
    else:
        print(x, '- нечетное число')

"""**Практика**  
Напишите программу, которая будет запрашивать целые числа у пользователя до тех пор, пока не будет введен 0. После чего выводится сумма всех введеных ранее чисел
"""

x = None
sum_ = 0
while x != 0:
    x = int(input('Введите число'))
    sum_ += x

print(sum_)

"""Напишем игру "Камень-ножницы-бумага""""

import random

player_wins = 0
computer_wins = 0

while player_wins < 3 and computer_wins < 3:
    
    user = input('Ваш вариант')
    computer = random.choice(['r', 's', 'p'])
    
    print('Компьютер выбрал:', computer)     
    
    if user == computer:
        print('Ничья')
        
    elif user == 'r':
        if computer == 's':
            print('Игрок победил! Камень ломает ножницы!')
            player_wins += 1
        else:
            print('Компьютер победил! Бумага закрывает камень!')
            computer_wins += 1
            
    elif user == 'p':
        if computer == 'r':
            print('Компьютер победил! Бумага закрывает камень!')
            computer_wins += 1
        else:
            print('Игрок победил! Ножницы режут бумагу!')
            player_wins += 1
            
    elif user == 's':
        if computer == 'p':
            print('Игрок победил! Ножницы режут бумагу!')
            player_wins += 1
        else:
            print('Компьютер победил! Камень ломает ножницы!')
            computer_wins += 1
            
    print('Счет: ', player_wins, ':', computer_wins)

    
if player_wins > computer_wins:
    print('По итогам трех раундов победил игрок')
else:
    print('По итогам трех раундов победил компьютер')

"""## Операторы break и continue
break – прерывает исполнение цикла  
continue – прерывает только текущую итерацию и сразу переходит к следующей  
Работают и с **while**, и с **for**
"""

phrase = '640Кб должно хватить для любых задач. Билл Гейтс (по легенде)'

for letter in phrase:
    if letter == ' ':
        break
    print(letter, end='')

for letter in phrase:
    if letter == ' ':
        continue
    print(letter, end='')

while True:
    user_input = input('Введите команду')
    if user_input == 'do':
        pass
    elif user_input == 'do2':
        pass
    elif user_input == 'quit':
        print('Выход из программы. До свидания!')
        break

"""Напишем программу для проверки логина и пароля

1) логин и пароль пользователя хранится в переменной

2) будем давать пользователю k попыток на ввод логина и пароля

3) если после трех попыток вверного ввода не было, то заблокируем вход - вывести на экран сообщение "Вход заблокирован"

4) если пароль и логин были введены верно, то вывести на экран сообщение "Добро пожаловать!"
"""

login_correct = 'admin'
pswd_correct = 'admin'
k = 3
for i in range(0, k):
    login = input('Ввелите логин')
    pswd = input('Введите пароль')
    if login != login_correct or pswd != pswd_correct:
        k -= 1
        print(f'Осталось {k} попытки')
    else:
        print('Добро пожаловать!')
        break
if k == 0:
    print('Вход заблокирован')

"""## Вложенные циклы

Вас не должно смущать, что циклы могут находится внутри других циклов. Все элементы языка можно комбинировать друг с другом, как захотим

Выведем фамилии построчно с указанием профессии в формате:

```
IT:  
Гейтс  
Джобс  
Возняк  

Физика:  
Эйнштейн  
Фейнман  
```
"""

professions = ['IT', 'Физика', 'Математика']
persons = [['Гейтс', 'Джобс', 'Возняк'], ['Эйнштейн', 'Фейнман'], ['Эвклид', 'Ньютон']]

for pro, person_list in zip(professions, persons):
    print(f'{pro}:')
    for person in person_list:
        print(person)
    print()



"""Напишем программу, которая выведет на экран таблицу умножения (Таблица Пифагора)"""

for row in range(1, 10):
    for col in range(1, 10):
        print(row * col, end='\t')
    print()

"""**Практика**

Имеется структура данных cook_book, в которой хранится информация об ингредиентах блюд и их количестве в расчете на одну порцию.

Необходимо вывести пользователю список покупок необходимого количества ингредиентов для приготовления блюд на определенное число персон в следующем виде:
```
Салат:
картофель, 500гр.
морковь, 250гр.
огурцы, 250гр.
горошек, 150гр.
майонез, 350мл.

Пицца:
сыр, 250гр.
томаты, 250гр.
тесто, 500гр.
бекон, 150гр.
колбаса, 150гр.
грибы, 100гр.

Фруктовый десерт:
хурма, 300гр.
киви, 300гр.
творог, 300гр.
сахар, 50гр.
мед, 250мл.
```
"""

cook_book = [
  ['салат',
      [
        ['картофель', 100, 'гр.'],
        ['морковь', 50, 'гр.'],
        ['огурцы', 50, 'гр.'],
        ['горошек', 30, 'гр.'],
        ['майонез', 70, 'мл.'],
      ]
  ],
  ['пицца',  
      [
        ['сыр', 50, 'гр.'],
        ['томаты', 50, 'гр.'],
        ['тесто', 100, 'гр.'],
        ['бекон', 30, 'гр.'],
        ['колбаса', 30, 'гр.'],
        ['грибы', 20, 'гр.'],
      ],
  ],
  ['фруктовый десерт',
      [
        ['хурма', 60, 'гр.'],
        ['киви', 60, 'гр.'],
        ['творог', 60, 'гр.'],
        ['сахар', 10, 'гр.'],
        ['мед', 50, 'мл.'],  
      ]
  ]
]

person = 5

for dish in cook_book:
#   print(dish)
  print(f'\n{dish[0].title()}:')
  for food in dish[1]:
    print(f'{food[0]}, {food[1] * person}{food[2]}')

"""Дана книга рецептов с информацией о том, сколько ингредиентов нужно для приготовления блюда в расчете на одну порцию (пример данных представлен ниже).
Напишите программу, которая будет запрашивать у пользователя количество порций для приготовления этих блюд и отображать информацию о суммарном количестве требуемых ингредиентов в указанном виде:

```
Сыр: 210 гр  
Томаты: 6 шт  
Огурцы: 60 гр  
Маслины: 30 гр  
Оливковое масло: 60 мл  
Салат: 30 гр  
Перец: 60 гр  
Колбаса: 90 гр  
Бекон: 90 гр  
Оливки: 30 гр  
Томаты: 60 гр  
Тесто: 300 гр  
Лимон: 3 шт  
Вода: 600 мл  
Сахар: 30 гр  
Лайм: 60 гр
```
Внимание! Одинаковые ингредиенты с разными размерностями нужно считать раздельно!
"""

cook_book = {
  'салат': [
     {'ingredient_name': 'сыр', 'quantity': 50, 'measure': 'гр'},
     {'ingredient_name': 'томаты', 'quantity': 2, 'measure': 'шт'},
     {'ingredient_name': 'огурцы', 'quantity': 20, 'measure': 'гр'},
     {'ingredient_name': 'маслины', 'quantity': 10, 'measure': 'гр'},
     {'ingredient_name': 'оливковое масло', 'quantity': 20, 'measure': 'мл'},
     {'ingredient_name': 'салат', 'quantity': 10, 'measure': 'гр'},
     {'ingredient_name': 'перец', 'quantity': 20, 'measure': 'гр'}
    ],
  'пицца': [
     {'ingredient_name': 'сыр', 'quantity': 20, 'measure': 'гр'},
     {'ingredient_name': 'колбаса', 'quantity': 30, 'measure': 'гр'},
     {'ingredient_name': 'бекон', 'quantity': 30, 'measure': 'гр'},
     {'ingredient_name': 'оливки', 'quantity': 10, 'measure': 'гр'},
     {'ingredient_name': 'томаты', 'quantity': 20, 'measure': 'гр'},
     {'ingredient_name': 'тесто', 'quantity': 100, 'measure': 'гр'},   
    ],
  'лимонад': [
     {'ingredient_name': 'лимон', 'quantity': 1, 'measure': 'шт'},
     {'ingredient_name': 'вода', 'quantity': 200, 'measure': 'мл'},
     {'ingredient_name': 'сахар', 'quantity': 10, 'measure': 'гр'},
     {'ingredient_name': 'лайм', 'quantity': 20, 'measure': 'гр'},    
    ]
}



"""**Спасибо за внимание буду рад ответить на ваши вопросы!**  
Ссылка на форму ОС:
https://forms.gle/y8xaFwJqtbFSjUeG8
"""